HOSANNA BUSINESS CONNECTIONS INC. DEVOPS TRAININGS

JENKINS NOTES


Continuious Integration
=============================
Stage 1 (Continuous Downlaod)
==============================
Developers create some code and upload it into some version
controlling system like Git.Jenkins should immediately download
that code and this is called continuous download

Stage 2 Continuous Build
=============================
The code downloaded in the previous stage has to coverted into a
setup file commonly know as artifact.This artifcat can be in the format
of jar,war,ear file etc.To trigger this build process jenkins uses 
build tools like Maven,Grade,Msbuild etc.This stage is called continuous
build

Stage 3 (Continuous Deployment)
==================================
The artifact in the previous stage has to deployed into the testing
environment.This testing servers might be running on some application
servers like tomcat,Weblogic etc.Once it is deployed here it become
available to the testers.This is called continuous deployment

Stage 4 (Continuous Testing)
================================
Testers create automation test scripts uisng tools like Seleniumm,Codedui
etc.Jenkins now executes these automation testin scripts and check if the 
application is working correctly or no.If it not working jenkins will send
email notifications to the corresponding team members.Develeopers will
fix the defects and upload the modifed code into git,Jenkins will again
start from stage 1

Stage 5 (Continuous delivery)
=============================
If testing passes jenkins will deploy tha artifact into the production
servers form where the end user or client can start accessing it
This is called continuous delivery

Stage1-4 are called as CI (Continuous Integration)
Stage 5 is called as CD (Continuous Delivery)
====================================================================
Day 2
====================================================================
JenkinServer
=================
1 JDK
2 Git,Maven
3 Jenkins


QAServer and ProdServer
============================
1 Tomcat9
2 Tomcat9-admin

===========================================================
Setup of servers for CI-CD
=====================================
1 Create 3 AWS ubuntu instances
  and name them Jenkinsserver,QAServer,ProdServer

Installing Jenkins
==========================
1 Connect to JEnkins server using Git bash

2 Update the apt repository
  sudo apt-get update

3 Install jdk
  sudo apt-get install -y openjdk-8-jdk

4 Install git and maven
  sudo apt-get install -y git maven

5 Download jenkins.war
  wget https://get.jenkins.io/war-stable/2.263.4/jenkins.war

6 To start jenkins
  java -jar jenkins.war

7 To access jenkins from browser
  public_ip_of_jenkinsserver:8080

8 Unlock jenkins by entering the first admin password

9 Click on Install suggested plugins

10 Create first admin user

11 Click on Continue--->Finish

==============================================================
Setting up tomcat on QA and ProdServer
==============================================================
1 Connect to QAServer AWS instance using git bash

2 Update the apt repository
  sudo apt-get update

3 Install tomcat9
  sudo apt-get install -y tomcat9

4 Install tomcat9-admin
  sudo apt-get install -y tomcat9-admin

5 Edit the tomcat-users.xml file
  sudo vim /etc/tomcat9/tomcat-users.xml
  Delete the entire content of the file and copy paste the below content
  Copy the below and paste on the editor then type :wq and enter
  <tomcat-users>
       <user username="admin" password="admin" roles="manager-script"/>
  </tomcat-users>
 
6 Restart tomcat
  sudo service tomcat9 restart

Repeat the above 6 steps on the Prodserver AWS instance

===============================================================================
Day 3
===============================================================================
===============================================================================
Stage 1 (Continuous Download)
====================================
1 Open the dashboard of Jenkins
2 Click on New item---->enter item name as "Development"
3 Select Free style project---->OK
4 Go to Source code management
5 Select Git
8 Enter github url where developers have uploaded the code
  https://github.com/intelliqittrainings/maven.git
9 Click on Apply--->Save
10 Go to the dashboard of Jenkins
11 Click on Build icon
   This job will download all the code from github repository
   into the Jenkinsserver AWS instance

----------------------------------------------------------------------
Stage 2 (Continuous Build)
================================
1 Open the dashboard of Jenkins
2 Go to the Development job--->Click on Configure
3 Go to Build section
4 Click on "Add build step"
5 Click on "Invoke top level maven target"
6 Enter Goal as: package
7 Apply--->Save
8 Go to the dashboard of Jenkins
9 Go to the Development job and click on Build icon
  This job will conver the code into an artifact and this artifact
  comes in the format of a war file

------------------------------------------------------------------------
Stage 3 (Continuous Deployment)
====================================
1 Open the dashboard of Jenkins
2 Click on Manage Jenkins
3 Click on Manage Plugins
4 Go to Available section
5 Search for "Deploy to container" plugin
6 Click on Install without restart
7 Go to the dashboard of jenkins
8 Go to the Development job
9 Click on Configure
10 Go to Post build actions
11 Click on Add post build action
12 Click on Deploy war/ear to containers
   war/ear file: **\*.war
   Context path: testapp
   Click on Add container
   Select tomcat9
   Enter tomcat credentials
   Tomcat url: private_ip_qaserver:8080
13 Apply--->Save
14 Go to the dashboard of jenkins
15 Go to the development job---->Click on build
   This job will deploy the artifact into the QAServers
   and to access the application from the level of browser
   public_ip_qaserver:8080/testapp


==================================================================
Day 4
=================================================================

===============================================================
Stage 4 (Continuous Testing)
===================================
1 Open the dashbord of Jenkins
2 Click on New item--->Enter item name as "Testing"
3 Select Free style project--->OK
4 Go to Source Code Management
5 Select Git
6 Enter the github url where testers have uploaded the 
  selenium test scripts
  https://github.com/intelliqittrainings/FunctionalTesting.git
7 Go to Build section
8 Click on Add build step
9 Click onExecute shell
  java -jar path_where_testing.jar_is_downloaded
10 Apply---->Save
11 Go to the dashboard of Jenkins
11 Go to the Testing job---->Click on Build icon
   This job will download the selenium test scripts and execute them

=========================================================================
Linking the Development job with the Testing job
----------------------------------------------------
1 Open the dashboard of Jenkins
2 Go to Development job---->Configure
3 Go to Post build actions
4 Click on Add post build action
5 Click on Build other projects
6 Enter project name as "Testing"
7 Click on Save
   Now if we run the Development job it will run the first three stages
  of CI-CD and then it will call the Testing job which will run the
  fourth stage


==================================================================
Copying artifacts from Development job to Testing job
=========================================================
1 Open the dashboard of Jenkins
2 Click on Manage Jenkins--->Manage plugins
3 Go to Availbale section--->Search for "Copy Artifact" plugun
4 Click on Install without restart
5 Go to the dashboard of Jenkins
6 Go to the Development job--->Click on Configure
7 Go to Post build actions
8 Click on Add post build actions
9 Click on Archive the artifacts
10 Enter files to be archived as **\*.war
11 Click on Apply--->>Save
12 Go to the dashboard of jenkins
13 Go to the Testing job---->Click on configure
14 Go to Build section
15 Click on Add build step
15 Click on Copy artifacts from other project
16 Enter project name as "Development"
17 Apply---->Save
================================================================
Stage 5 (Continuous Delivery)
===================================
1 Open the dashboard of jenkins
2 Go to Testing job--->Configure
3 Go to Post build actions
4 Click on Add post build action
5 Click on Deploy war/ear to container
  war/ear files: **\*.war
  contextpath: prodapp
  Click on Add container
  Select tomcat9
  Enter username and password of tomcat9
  Romcat url: private_ip_of_prodserver:8080
6 Apply---->Save

=======================================================================
Day 5
======================================================================
====================================================================
User Administration in Jenkins
===========================================

Creating users in Jenkins
===========================
1 Open the dashboard of jenkins
2 click on manage jenkins
3 click on manage users
4 click on create users
5 enter user credentials

Creating roles and assigning
==============================
1 Open the dashboard of jenkins
2 click on manage jenkins
3 click on manage plugins
4 click on role based authorization strategy plugin
5 install it
6 go to dashboard-->manage jenkins
7 click on configure global security
8 check enable security checkbox
9 go to authorization section-->click on role based strategy  radio button
10 apply-->save
11 go to dashboard of jenkins
12 click on manage jenkins
13 click on manage and assign roles
14 click on manage roles
15 go to global roles and create a role "employee"
16 for this employee in overall give read access
   and in view section give all access
17 go to project roles-->Give the role as developer
   and pattern as Dev.* (ie developer role can access
   only those jobs whose name start with Dev)
18 similarly create another role as tester and assign the pattern as "Test.*"
19 give all permissions to developers and tester
20 apply--save
21 click on assign roles
22 go to global roles and add user1 and user2 
23 check user1 and user2 as employees
24 go to item roles
25 add user1 and user2
26 check user1 as developer and user2 as tester
27 apply-->save
If we login into jenkins as user1 we can access only the development 
related jobs and user2 can access only the testing related jobs

=============================================================================
===========================================================================
Alternate ways of setup of Jenkins
=======================================
1 Update the apt repository
  sudo apt-get update

2 Install jdk:1.8
  sudo apt-get install -y openjdk-8-jdk

3 Added the jenkins keys to the apt key repository
  wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key 
                                                        | sudo apt-key add -

4 Add the debian package repository to the jenkins.list file
  sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ 
                                  > \ /etc/apt/sources.list.d/jenkins.list'

5 Update the apt repository
  sudo apt-get update

6 Install jenkins
  sudo apt-get install -y jenkins

==============================================================================
Day 6
===============================================================================
===========================================================================
MAster Slave Architecture of Jenkins
============================================
This is used distribute the workloadj/\;.; 9pol., to additional linux
servers called as slaves.This is used when we want to run multiple 
jobs on jenkins parallelly.

Setup
============
1 Create a new AWS ubuntu20 instance

2 Install the same version of java as present in the master
  sudo apt-get update
  sudo apt-get install -y openjdk-8-jdk

3 Setup passwordless SSH betwen Master and slave
  a) Connect to slave and set password to default user
     sudo passwd ubuntu
  b) Edit the ssh config file
     sudo vim /etc/ssh/sshd_config
     Search for "PasswordAuthentication" and change it from no to yes
  c) Restart ssh
     sudo service ssh restart
  d) Connect to Master using git bash
  e) Generate the ssh keys
     ssh-keygen
  f) Copy the ssh keys
     ssh-copy-id ubuntu@private_ip_of_slave
     This will copy the content of the public keys to a file called
     "authorised_keys" on the slave machine


  Connect to slave using git bash
4 Downlaod the slave.jar file
  wget http://private_ip_of_jenkinsserver:8080/jnlpJars/slave.jar

5 Give execute permissions to the slave.jar
  chmod u+x slave.jar

6 Create an empty folder that will be the workspace of jenkins
  mkdir workspace

7 Open the dashboard of Jenkins
  
8 Click on Manage Jenkins--->Click on Manage Nodes and Clouds

9 Click on New node---->Enter some node name as Slave1

10 Select Permanant Agent--->OK

12 Enter remote root directory as /home/ubuntu/workspace

13 Labels: myslave (This label is associated with a job in jenkins
   and then that job will run on that slave)

14 Go to Launch Method and select "Launch agent via execution of command on master"

15 Click on Save

16 Go to the dashboard of Jenkins

17 Go to the job that we want to run on slave---->Click on Configure

18 Go to General section

19 Check restrict where this project can be run

20 Enter slave label as myslave

============================================================================
Day 7
==========================================================================
Pipeline as Code
===========================
This is the process of implementing all stages of CI-CD from the level
of a Groovy script file called as "Jenkinsfile".

Advantages
=================
1 Since all the stages of CI-Cd are controlled from the level of
a program which is uploaded into git, it give all the team members the
ability to review and modify the code and still we can maintain
multiple versions and toggle between those versions

2 Pipeline scripts can withstand planned and unplanned restarts of the
Jenkins master

3 Pipeline scripts can do all the stages of CI-CD with minumum number of
plugins so their performance is faster

4 We can handle complex real time scenarios like failure conditions
if conditions,loop etc

========================================================================
Pipeline as Code can be implemented in 2 ways
1 Scripted Pipeline
2 Declarative Pipeline


======================================================================
Syntax of Scripted Pipeline
================================
node('master')
{
   stage('Stage name in ci-cd')
   {
     Groovy code to implement this stage
   }
}

Syntax of Declarative Pipeline
===================================
pipeline
{
  agent any
  stages
  {
    stage('Stage name in CI-CD')
    {
      steps
      {
         Groovy code to implement this stage
      }
    }
}

========================================================================
Scripted Pipeline
======================
1 Open the dashboard of JEnkins
2 Click on New item
3 Enter some item name (ScriptedPipeline)
4 Select Pipeline--->OK
5 Go to the Pipeline section and generate the below code




node('master')
{
    stage('ContinuousDownload')
    {
        git 'https://github.com/intelliqittrainings/maven.git'
    }
    stage('ContinuousBuild')
    {
        sh 'mvn package'
    }
    stage('ContinuousDeployment')
    {
        deploy adapters: [tomcat9(credentialsId: 'd9114eb1-5a03-46e4-a038-7ad5a03145d9', path: '', url: 'http://172.31.93.113:8080')], contextPath: 'qaapp', war: '**/*.war'
    }
     stage('ContinuousTesting')
    {
        git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
        sh 'java -jar /home/ubuntu/.jenkins/workspace/ScriptedPipeline/testing.jar'
    }
    stage('ContinuousDelivery')
    {
        input message: 'Waiting for approval from the DM!', submitter: 'srinivas'
        deploy adapters: [tomcat9(credentialsId: 'd9114eb1-5a03-46e4-a038-7ad5a03145d9', path: '', url: 'http://172.31.82.109:8080')], contextPath: 'prodapp', war: '**/*.war'
    }
    
   
}




Declarative Pipeline
====================================
1 1 Open the dashboard of JEnkins
2 Click on New item
3 Enter some item name (DeclarativePipeline)
4 Select Pipeline--->OK
5 Go to the Pipeline section and generate the below code


pipeline
{
    agent any
    stages
    {
        stage('ContinuosDownload')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/maven.git'
            }
        }
        stage('ContinuosBuild')
        {
            steps
            {
                sh 'mvn package'
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                 deploy adapters: [tomcat9(credentialsId: 'd9114eb1-5a03-46e4-a038-7ad5a03145d9', path: '', url: 'http://172.31.93.113:8080')], contextPath: 'qaapp', war: '**/*.war'
            }
        }
        stage('Continuoustesting')
        {
            steps
            {
                 git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
        sh 'java -jar /home/ubuntu/.jenkins/workspace/ScriptedPipeline/testing.jar'
            }
        }
        stage('ContinuousDelivery')
        {
            steps
            {
                   input message: 'Waiting for approval from the DM!', submitter: 'srinivas'
        deploy adapters: [tomcat9(credentialsId: 'd9114eb1-5a03-46e4-a038-7ad5a03145d9', path: '', url: 'http://172.31.82.109:8080')], contextPath: 'prodapp', war: '**/*.war'
            }
        }
    }
}


==============================================================================
Day 8
=================================================================================
Declarative Pipeline with Post conditions
=============================================
pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
               git 'https://github.com/selenium-saikrishna/maven.git' 
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                sh 'mvn package'
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
               deploy adapters: [tomcat9(credentialsId: 'e55d0b96-e001-4563-be38-2c7347078e19', path: '', url: 'http://172.31.21.238:8080')], contextPath: 'testapp', war: '**/*.war'
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
               git 'https://github.com/selenium-saikrishna/FunctionalTesting.git'
               sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline1/testing.jar'
            }
        }
         stage('ContinuousDelivery')
        {
            steps
            {
               deploy adapters: [tomcat9(credentialsId: 'e55d0b96-e001-4563-be38-2c7347078e19', path: '', url: 'http://172.31.23.131:8080')], contextPath: 'prodapp', war: '**/*.war'
            }
        }
        
    }
}



==========================================================================
pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
               git 'https://github.com/selenium-saikrishna/maven.git' 
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                sh 'mvn package'
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
               deploy adapters: [tomcat9(credentialsId: 'e55d0b96-e001-4563-be38-2c7347078e19', path: '', url: 'http://172.31.21.238:8080')], contextPath: 'testapp', war: '**/*.war'
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
               git 'https://github.com/selenium-saikrishna/FunctionalTesting.git'
               sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline1/testing.jar'
            }
        }
       
    }
    post
    {
        success
        {
            deploy adapters: [tomcat9(credentialsId: 'e55d0b96-e001-4563-be38-2c7347078e19', path: '', url: 'http://172.31.23.131:8080')], contextPath: 'prodapp', war: '**/*.war'
        }
        failure
        {
            mail bcc: '', body: 'Jenkins had failed in CI', cc: '', from: '', replyTo: '', subject: 'CI Failed', to: 'selenium.saikrishna@gmail.com'
        }
      
    }
    
    
    
    
    
    
    
}





============================================================================

Exception Handling
=======================
try
{

}
catch(Exception e)
{


}

===================================================================
Declarative Pipeline with Exception handling
====================================================================

pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                script
                {
                    try
                    {
                        git 'https://github.com/selenium-saikrishna/maven.git' 
                    }
                    catch(Exception e1)
                    {
                       mail bcc: '', body: 'Jenkins is unable to download the dev code from github', cc: '', from: '', replyTo: '', subject: 'Download Failed', to: 'git.team@gmail.com'
                       exit(1)
                    }
                }
               
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                script
                {
                    try
                    {
                           sh 'mvn package'
                    }
                    catch(Exception e2)
                    {
                        mail bcc: '', body: 'Jenkins is unable to create an artifact from the downloaded code', cc: '', from: '', replyTo: '', subject: 'Buid Failed', to: 'developers.team@gmail.com'
                        exit(1)
                    }
                }
             
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                script
                {
                    try
                    {
                        deploy adapters: [tomcat9(credentialsId: 'e55d0b96-e001-4563-be38-2c7347078e19', path: '', url: 'http://172.31.21.238:8080')], contextPath: 'testapp', war: '**/*.war' 
                    }
                    catch(Exception e3)
                    {
                        mail bcc: '', body: 'Jenkins is unable to deploy artifact into tomcat on the QAServers', cc: '', from: '', replyTo: '', subject: 'Deployment Failed', to: 'middleware.team@gmail.com'
                        exit(1)
                    }
                }
               
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                script
                {
                    try
                    {
                        git 'https://github.com/selenium-saikrishna/FunctionalTesting.git'
               sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline1/testing.jar'
                    }
                    catch(Exception e4)
                    {
                        mail bcc: '', body: 'Selenium test scripts are failing', cc: '', from: '', replyTo: '', subject: 'Testing Failed', to: 'qa.team@gmail.com'
                        exit(1)
                    }
                }
               
            }
        }
         stage('ContinuousDelivery')
        {
            steps
            {
                script
                {
                    try
                    {
                         deploy adapters: [tomcat9(credentialsId: 'e55d0b96-e001-4563-be38-2c7347078e19', path: '', url: 'http://172.31.23.131:8080')], contextPath: 'prodapp', war: '**/*.war'
                    }
                    catch(Exception e5)
                    {
                        mail bcc: '', body: 'Jenkins is unable to deploy into tomcat on the prodservers', cc: '', from: '', replyTo: '', subject: 'Delivery Failed', to: 'delivery.team@gmail.com'
                    }
                }
              
            }
        }
        
    }
}



















